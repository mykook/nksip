            -*- html -*-

    NkSIP overview page


@author Carlos Gonzalez Florido <carlosj.gf@gmail.com>
@copyright 2013 Carlos Gonzalez Florido
@version 0.4.0
@title Welcome to NkSIP

@doc NkSIP is an Erlang <a href="http://en.wikipedia.org/wiki/Session_Initiation_Protocol">SIP</a> framework (or <i>application server</i>), which greatly facilitates the development of robust and scalable server-side SIP applications like proxy, registrar, redirect or outbound servers and <a href="http://en.wikipedia.org/wiki/Back-to-back_user_agent">B2BUAs</a>.


== Contents ==

<ol>
  <li>{@section Introduction}</li>
  <li>{@section Basic aspects}</li>
  <ul>
      <li>{@section SipApps}</li>
      <li>{@section Requests and responses}</li>
      <li>{@section Transactions}</li>
      <li>{@section Dialogs}</li>
      <li>{@section Sessions}</li>
      <li>{@section Subscriptions}</li>
      <li>{@section Contacts}</li>
  </ul>
  <li>{@section Developing applications with NkSIP}</li>
  <ul>
      <li>{@section Starting a SipApp}</li>
      <li>{@section Sending requests}</li>
      <li>{@section Receiving requests}</li>
      <li>{@section Sending a response}</li>
      <li>{@section Callback functions reference}</li>
  </ul>
  <li>{@section Registrar}</li>
  <li>{@section Configuration}</li>
  <li>{@section Log and Tracing}</li>
  <li>{@section Supported RFCs and features}</li>
</ol>



== Introduction ==

SIP is <i>the standard protocol</i> related to IP voice, video and remote sessions, supported by thousands of devices, softphones and network operators. It is the basic building block for most current voice or video enabled networks and it is the core protocol of the <i>IP Multimedia Subsytem</i> (<a href="https://en.wikipedia.org/wiki/IP_Multimedia_Subsystem">IMS</a>). SIP is powerful and flexible, but also very complex to work with. SIP basic concepts are easy to understand, but developing robust, scalable, highly available applications is usually quite hard and time consuming, because of the many details you have to take into account.

NkSIP takes care of much of the SIP complexity from the developer while allowing full access to requests and responses. 

NkSIP allows you to run any number of <b>SipApps</b>. To {@link nksip:start/4. start} a SipApp, you define a <i>name</i>, set of <i>transports</i> to start listening on and a <i>callback module</i>. Currently the only way to develop NkSIP applications is using <a href="http://www.erlang.org">Erlang</a> (a new, language-independent way of developing SipApps is in the works). You can now start {@link nksip_uac. sending} SIP requests, and when your application starts receiving requests, specific functions in the callback module will be called. Each defined {@link nksip_sipapp. callback function} has a sane default functionality, so you only have to implement the functions you need to customize. You don't have to deal with transports, retransmissions, authentications or dialog management. All of those aspects are managed by NkSIP in a standard way. In case you need to, you can implement the related callback functions, or even process the request by yourself using the powerful NkSIP Erlang functions.

NkSIP has a clean, written from scratch, <a href="http://www.erlang.org/doc/design_principles/users_guide.html">OTP compliant</a> and <a href="http://www.erlang.org/doc/reference_manual/typespec.html">fully typed</a> Erlang code. New RFCs and features can be implemented securely and quickly. If you want to customize the way NkSIP behaves beyond what the callback mechanism offers, it should be easy to understand the code and use it as a powerful base for your specific application server.

NkSIP is currently alpha quality. It is <b>not yet production-ready</b>, but it is already very robust, thanks to its OTP design. Also thanks to its Erlang roots it can perform many actions while running: starting and stopping SipApps, hot code upgrades, configuration changes and even changing your application behavior and function callbacks on the fly.

NkSIP scales automatically using all of the available cores on the machine. Using common hardware (4-core i7 MacMini), it is easy to get more than 3.000 call cycles (INVITE-ACK-BYE) or 10.000 stateless registrations per second. On the roadmap there is a fully distributed version, based on <a href="https://github.com/basho/riak_core">Riak Core</a>, that will allow you to add and remove nodes while running, scale as much as needed and offer a very high availability, all of it without changing your application.

NkSIP is a pure SIP framework, so it <em>does not support any real RTP media processing</em>: it can't record a call, host an audio conference or transcode. These type of tasks should be done with a SIP media server, like <a href="http://www.freeswitch.org">Freeswitch</a> or <a href="http://www.asterisk.org">Asterisk</a>. However NkSIP can act as a standard endpoint (or a B2BUA, actually), which is very useful in many scenarios: registering with an external server, answering and redirecting a call or recovering in real time from a failed media server.


== Basic aspects ==

NkSIP hides most SIP complexity from the developer, so even with some basic SIP knowledge it is possible to build complex, robust and scalable SIP applications. But <i>it is necessary</i> to know some basic SIP concepts to use NkSIP. We don't try to explain SIP here (it would be difficult even to scratch the surface of the first of the RFCs), but we will try to explain the way NkSIP uses some basic SIP concepts in order to better understand how to use it.

=== SipApps ===

A <i>SipApp</i> represents a SIP entity started by NkSIP. When starting a SipApp you configure some basic aspects and the new SIP element is started in the network. From this moment it can send requests and receive them from other SIP elements. NkSIP allows to start any number of SipApps simultaneously, as long as they don't listen on the same ip and port.

You can develop <i>any</i> kind of SIP application with NkSIP. This includes endpoints, stateful and stateless proxies, registrars and redirect servers, B2BUAs or any combination of the above, all at the same time, in the same SipApp or in different ones.

Any NkSIP instance can start any number of <b>SipApps</b>. Each SipApp starts listening on one or more sets of IP, port and transport. For example, an instance of NkSIP could start a <i>server1</i> SipApp, which could be a proxy server listening on 192.168.0.1:5060 using protocols UDP and TCP, and on 192.168.0.1:5061 using TLS, and another one called <i>b2bua2</i> behaving as a B2BUA could be started listening on any other IP and port of the host.

When starting a SipApp, you must supply a <b>callback Erlang module</b> for it, using {@link nksip_sipapp} <i>behavior</i>. There is a number of callback functions this module can implement, but only `init/1' is mandatory. This `nksip_sipapp' behavior closely resembles the familiar OTP `gen_server' behavior (it <i>is</i> actually a modified and mostly backwards-compatible `gen_server' under the hood, so even standard `handle_call', `handle_cast', `handle_info' and `terminate' callbacks are available).
As such a `gen_server', `init/1' is called on startup and must supply an <i>application state</i> that will be offered and can be modified by the application in every callback call.

As an important difference with standard `gen_server', each other callback function apart from `init/1' has a <i>default implementation</i> in case it is not actually defined in your callback module. See {@link nksip_sipapp} to find the default implementation for each one.


=== Requests and responses ===

SIP is all about sending specific SIP messages (<i>requests</i>), and receiving one or more messages in response for them (<i>responses</i>). Any SIP element must behave, at the same time, as a client (<i>uac</i> in SIP terminology) sending requests and receiving responses, and as a  server (<i>uas</i>), receiving requests and sending responses.

There are a small number of SIP request types (INVITE, OPTIONS, etc.), and each corresponding response will have a HTTP-type code (100-699). Responses of type 1xx are <i>provisional</i>, and the rest are <i>final</i>. 2xx responses denote a successful processing, 3xx denote a redirect proposal, 4xx indicate an error processing the request, 5xx a server error and 6xx a global error.

In NkSIP you can start sending requests using the functions in {@link nksip_uac} such as `options/3', `invite/3' etc., and the response will be received as the function's return value. For example, if you send and OPTIONS request, the called party will probably reply with a 200 response containing, among other things, the codecs it supports.

Your application will also start receiving requests sent from other SIP endpoints or proxies, and NkSIP will then call the corresponding function in your callback module. Depending on the value your function returns, a specific SIP response will be generated and sent. For example, if someone sends you an INVITE, NkSIP will call `invite(Request, From, State)' in your callback module (if this function is not defined, the default implementation in {@link nksip_sipapp} would be used). You could answer `{reply, busy, State}' to send a standard <i>busy</i> (code 486) response, and NkSIP will generate all required SIP headers and it will send back the response.


=== Transactions ===

SIP offers two possibilities for sending requests and receiving responses: <i>inside a transaction</i> or <i>without transaction</i>. 

A <i>SIP transaction</i> is a piece of state created by a SIP endpoint acting as a client when the request is sent, and it is destroyed soon after a final response is received, or it is created by a SIP endpoint acting as a server when a request is received, and it is destroyed after a final response is sent. Among other things, transactions take care of message retransmissions automatically.

Most SIP requests are usually sent and received inside transactions, but in some cases it makes sense to send or receive requests without a corresponding transaction. As no additional state is stored, the application will scale better. NkSIP request generating functions such as {@link nksip_uac:invite/3} or {@link nksip_uac:options/3} will always use transactions, but it offers you the option to process incoming requests statelessly, mainly for failed authentication responses (or to test the maximum speed NkSIP is able to process messages). They are also not used if you decide to behave as a <i>stateless proxy</i> for any incoming request.

If transactions are no used, retransmissions and forked responses will not be detected, and they will look like brand new requests to the application. NkSIP won't send retransmissions either.

Except for INVITE, SIP transactions should be very short-lived. They should complete quickly (bellow half a second) or retransmissions will start to be sent. Final responses for INVITE transactions can last for seconds or even minutes (as the user must usually reply to the invite manually), but even in this case provisional responses should be sent quickly.


=== Dialogs ===

A <i>SIP dialog</i> represents a long-term relationship between two endpoints, usually lasting for the duration of a call or subscription.

A dialog can host several <i>usages</i> simultaneously: none or one <i>INVITE usage</i>, and any number of <i>SUBSCRIBE usages</i>. The first usage creates the dialog, and it is destroyed after the last usage is removed.

A successful response to a INVITE request creates a <i>INVITE usage</i>, that is maintained until a BYE request is received or other circumstances occur. Any starting call will usually create a new dialog (it can actually create several dialogs, but NkSIP will automatically send BYE to all but the first one). When the call is <i>hung up</i>, a BYE is usually sent and NkSIP destroys the usage.

New requests can be sent <i>inside</i> the newly created dialog. If no new request is sent or received during a specific period of time (see {@section Configuration}), NkSIP would also destroy the usage. You should <i>refresh</i> the usage periodically (for example calling {@link nksip_uac:refresh/3} or sending a new in-dialog request).

A successfull SUBSCRIBE followed by a NOTIFY request creates a <i>SUBSCRIBE usage</i>, and it is maintained until a NOTIFY with status <i>terminated</i> is received or the subscription expires. You should refresh the usage sending new SUBSCRIBE requests. 

When a dialog is created, destroyed or updated the corresponding function in your callback module is called. You can use these calls to know about the dialog current state, for example for billing purposes. Stateless proxies don't generate or process dialogs.



=== Sessions ===

INVITE SIP requests usually carry a body describing a session proposal, using <a href="http://tools.ietf.org/html/rfc4566">SDP</a> protocol. The remote party can reply with its own SDP, and a new <i>session</i> is then established (audio, video or any other class), associated to the corresponding dialog. During the dialog lifetime, any of the parties can send a new INVITE (it would be what is commonly known as a <i>reINVITE</i>) with a new SDP to modify the current session (for example, to put the call <i>on hold</i>).

When, inside a dialog, NkSIP detects that a session has been established, modified or terminated, it calls the corresponding function in the callback module. You can use this callback to discover the codecs being used, if a call has been put on hold, or the RTP and RTCP IPs and ports been used.

NkSIP is a pure SIP framework and, as such, has no RTP processing capability by itself. This means it cannot decode any <i>codec</i>, put the audio on the speaker, save the call audio on disk or host an audio conference. This functions are usually done by a SIP media server.

If you are developing a SIP proxy, you won't usually want to do any media processing. If you are developing an endpoint or an B2BUA, you can pretend to have media processing capabilities using a media server as a backend, for example inviting the media server before answering the call and sending the media server's SDP as if it were generated by ours. 

You can use the functions in {@link nksip_sdp} to access, create or modify SDP bodies.


=== Subscriptions ===

Youn can start a new subscription requirement to a server sending a {@link nksip_uac:subscribe/3} request. You should select an <i>event package</i> supported at the server. It the remote party accepts the request, it will start sending NOTIFYs requests any time it wants to, and NkSIP will call your callback {@link nksip_sipapp:notify/3} for each one. The body of the NOTIFY will have the meaning defined in this specific event package. You should send a new SUBSCRIBE before the subscriptions expires. 

If you are defining a server, you indicate in the SipApp's config the event packages you support, and NkSIP will call your callback {@link nksip_sipapp:subscribe/3} when a new valid SUBSCRIBE arrives. If you accept it, you should call inmeditaly {@link nksip_uac:notify/3} to send a NOTIFY, and after that any time you want to. You can also terminate the subscription at any moment.


=== Contacts ===

There are several situations in any SIP enabled application where we must send to the other party a SIP URI showing the protocol, IP and port where we are currently listening to receive new requests. A <i>Contact</i> header is used for this. For example when sending a REGISTER we must indicate to the registrar where it must send any request directed to us. When starting a dialog with INVITE we must inform the other party where to receive in-dialog requests.

NkSIP will try to automatically generate a correct <i>Contact</i> header for you, using the same transport, IP and port used to send this specific request. For example, if we have a <i>SipApp</i> listening on 192.168.0.1:5070 for UDP and TCP, and 192.168.0.1:5071 for TLS, sending a REGISTER to the <i>URI</i> `<sip:registrar.com;transport=tcp>', will generate a `Contact' header like `<sip:192.168.0.1:5070;transport=tcp>'.

If the listening address of the selected transport is <i>0.0.0.0</i> (meaning "listen on all interfaces") NkSIP will try to find, among all the IPs of the host, which is the <i>best</i> one to use. It uses a sorted list of network cards (specifically `eth0', `eth1', `en0' and `en1') fetching the IP from the first active network card. If none is available it will get any IP from the host.

In some circumstances, it makes sense to override NkSIP automatic calculation of contacts and provide a specific one, for example if we want to offer a host name instead of an IP (typically a host resolving to several different IPs in different hosts), or to force the use of a specific IP of the host or a specific transport.



== Developing applications with NkSIP ==


=== Starting a SipApp ===

First of all, you need to start the SipApps you are going to work with. See {@link nksip} for a reference description and available options. 


=== Sending requests ===

NkSIP supports all defined SIP methods: <i>OPTIONS</i>, <i>REGISTER</i>, <i>INVITE</i>, <i>ACK</i>, <i>BYE</i> and <i>CANCEL</i>, <i>INFO</i>, <i>PRACK</i>, <i>UPDATE</i>, <i>SUBSCRIBE</i>, <i>NOTIFY</i>, <i>REFER</i>, <i>PUBLISH</i> and <i>MESSAGE</i> are also supported.


=== Receiving requests ===

Once started a SipApp and listening on a set of transports, IPs and ports, it can start receiving requests from other SIP endpoints. When a new request is received, NkSIP will launch a new Erlang process to manage the request and its response. It will start calling specific functions in the callback module defined when the SipApp was started. See {@link nksip_sipapp} for a detailed description of available callback functions.


=== Sending a response ===

Many of the functions in the callback module allow to send a response to the incoming request. NkSIP allows you to use easy response codes like `busy', `redirect', etc. Specific responses like `authenticate' are used to send an authentication request to the other party. In case you need to, you can also reply any response code, headers, and body. 

It is also possible to send <i>reliable provisional responses</i>, that the other party will acknoledge with a <i>PRACK</i> request. All of it is handled by NkSIOP automatically.
The full list of recognized responses is a available in {@link nksip_reply}.



== Registrar ==

NkSIP includes a full registrar implementation according to RFC3261. Its functionality is described in {@link nksip_registrar}.

It uses by default the buil-in, RAM-only store, but can be configured to use any other database implementing callback {@link nksip_sipapp:registrar_store/3}.


== Event State Compositor ==

NkSIP includes full support to receive PUBLISH requests and store the the publisher state, according to RFC3903 Its functionality is described in {@link nksip_publish}.

It uses by default the buil-in, RAM-only store, but can be configured to use any other database implementing callback {@link nksip_sipapp:publish_store/3}.


== Resolver ==

NkSIP includes a caching SIP location server. Every DNS access (for A/AAAA, SRV and NAPTR records) is 
cached (see configuration for default time). Use the functions in {@link nksip_dns} to clear the cache.


== Configuration ==

NkSIP has few global configuration options. Their default values are defined in the {@link nksip_config}.

== Log and Tracing ==

NkSIP uses <a href="https://github.com/basho/lager">Lager</a> for logging, supporting multiple log levels, log rotation, etc. The following `Lager' levels are used:

<table border="1">
  <tr><th>Level</th><th>Typical use</th></tr>
  <tr><td>`debug'</td><td>Maximum level of information. Do not use it in production</td></tr>
  <tr><td>`info'</td><td>Detailed information. Not recommended in production</td></tr>
  <tr><td>`notice'</td><td>Important information. Recommended in production</td></tr>
  <tr><td>`warning'</td><td>Actions you should take into account</td></tr>
  <tr><td>`error'</td><td>Important internal errors</td></tr>
  <tr><td>`critical'</td><td>Not used currently</td></tr>
  <tr><td>`alert'</td><td>Not used currently</td></tr>
  <tr><td>`emergency'</td><td>Not used currently</td></tr>
</table>

You can configure Lager using its erlang environment variables, or using an erlang start up configuration file (usually called `app.config'). See the `samples' directory for an example of use.

Lager supports several backends, typically console and disk. You can change the current <i>log level</i> with `lager:set_loglevel/2,3' (for example `lager:set_loglevel(lager_console_backend, debug)' and `lager:set_loglevel(lager_file_backend, "console.log", debug)').

NkSIP can also activate SIP tracing on any SipApp, using the trace facilities in {@link nksip_trace}. Use {@link nksip_trace:start/3} to start tracing all SIP messages coming from or going to specific IP addresses, in either the console or a file on disk.


== Supported RFCs and features ==

See the <a href="https://github.com/kalta/nksip">GitHub NkSIP repository</a> for up to date information about:

<ul>
  <li><a href="https://github.com/kalta/nksip/blob/master/doc/FEATURES.md">Features</a> and supported RFCs.</li>
  <li><a href="https://github.com/kalta/nksip/blob/master/doc/ROADMAP.md">Roadmap</a>.</li>
  <li><a href="https://github.com/kalta/nksip/blob/master/doc/CHANGELOG.md">Change log</a> and releases.</li>
</ul>
